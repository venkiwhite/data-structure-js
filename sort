unsortedArray = [1, 3, 2, 76, 13, 9, 34, 67];
var array = mergeSort(unsortedArray);
console.log(array);
function mergeSort(unsortedArray) {
    console.log('start');
    // No need to sort the array if the array only has one element or empty
    if (unsortedArray.length <= 1) {
        console.log('entered if block:'+unsortedArray);
        return unsortedArray;
    }
    // In order to divide the array in half, we need to figure out the middle
    const middle = Math.floor(unsortedArray.length / 2);
console.log('middle:'+middle);
    // This is where we will be dividing the array into left and right
    const left = unsortedArray.slice(0, middle);
    const right = unsortedArray.slice(middle);
console.log('left:'+left,'right:'+right);
    // Using recursion to combine the left and right
    return merge(
       
        mergeSort(left), mergeSort(right)
    );
    console.log('calling merge');

}

// Merge the two arrays: left and right
function merge(left, right) {
    let resultArray = [], leftIndex = 0, rightIndex = 0;

    // We will concatenate values into the resultArray in order
    while (leftIndex < left.length && rightIndex < right.length) {
        console.log(leftIndex+'<'+left.length+'&&'+rightIndex+'<'+right.length);
        if (left[leftIndex] < right[rightIndex]) {
            resultArray.push(left[leftIndex]);
            console.log('resultArrayif'+resultArray);
            leftIndex++; // move left array cursor
        } else {
            console.log('resultArrayelse'+resultArray);
            resultArray.push(right[rightIndex]);
            rightIndex++; // move right array cursor
        }
    }
console.log('result' +resultArray);
    // We need to concat to the resultArray because there will be one element left over after the while loop
    return resultArray
        .concat(left.slice(leftIndex))
        .concat(right.slice(rightIndex));
}
